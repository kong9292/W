(async () => {
  try {
    const chalk = (await import("chalk")).default;
    const { makeWASocket, useMultiFileAuthState, PHONENUMBER_MCC, makeCacheableSignalKeyStore } = await import("@whiskeysockets/baileys");
    const fs = await import('fs');
    const pino = await import('pino');
    const axios = (await import("axios")).default;
    const os = await import('os');
    const crypto = await import('crypto');
    const readline = (await import('readline')).createInterface({ input: process.stdin, output: process.stdout });
    const { exec } = await import('child_process');

    // Clear the terminal screen in Termux
    const clearScreen = () => {
      process.stdout.write('\033c');
    };

    // Define the question function globally
    const question = (text) => new Promise((resolve) => readline.question(text, resolve));

    // WhatsApp Name Logo
    const displayLogo = () => {
      const logo = `
      ██╗░░░░░░█████╗░░█████╗░██████╗░███████╗██████╗░ 
      ██║░░░░░██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗ 
      ██║░░░░░██║░░██║███████║██║░░██║█████╗░░██████╔╝ 
      ██║░░░░░██║░░██║██╔══██║██║░░██║██╔══╝░░██╔══██╗ 
      ███████╗╚█████╔╝██║░░██║██████╔╝███████╗██║░░██║ 
     ╚══════╝░╚════╝░╚═╝░░╚═╝╚═════╝░╚══════╝╚═╝░░╚═╝ 
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
     Contact = :: 919354720853
     Owner = :: Sahil Ansari 
     Version = :: 0.3
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      `;
      console.log(chalk.green(logo));
      console.log(chalk.yellow('WhatsApp Automation Tool'));
    };

    // Function to generate a unique, consistent approval key using a hash
    const generateApprovalKey = () => {
      const userID = os.userInfo().username + os.hostname();  // Combine username and hostname for uniqueness
      const hash = crypto.createHash('sha256').update(userID).digest('hex');  // Hash the key to sanitize and make it unique
      const key = `Premium-Tool-${hash.slice(0, 12)}`;  // Use first 12 characters of the hash for the key
      return key;
    };

    // Function to check if the user's key is approved (checks against an external list, like Pastebin)
    const checkApproval = async (key) => {
      let isApproved = false;
      try {
        const response = await axios.get('https://pastebin.com/raw/3qYPuSRt');  // Replace with actual approval list URL
        if (response.data.includes(key)) {
          isApproved = true;
        } else {
          console.log(chalk.redBright(`Your key (${key}) is not approved.`));
          const contactLink = `https://wa.me/+919354720853?text=Hello%20Owner!%20Please%20approve%20my%20key:%20${encodeURIComponent(key)}`;
          console.log(chalk.yellow(`Contact the owner for approval: ${contactLink}`));
        }
      } catch (error) {
        console.error("Error checking approval:", error);
      }
      return isApproved;
    };

    // Retry approval system until approved or user exits
    const approvalSystem = async () => {
      let approved = false;
      const key = generateApprovalKey();

      clearScreen(); // Clear terminal screen at the start
      displayLogo(); // Display the WhatsApp name logo
      console.log(chalk.green(`Your generated key is: ${key}`));

      while (!approved) {
        approved = await checkApproval(key);

        if (!approved) {
          const retry = await question(chalk.yellow(`Do you want to retry? (y/n): `));
          if (retry.toLowerCase() !== 'y') {
            console.log(chalk.red('Exiting the tool. Please contact the owner for approval.'));
            process.exit(0);
          }
        } else {
          console.log(chalk.green("Congrats! You have been approved. Access granted."));
        }
      }
    };

    // Call approval system to check the user before continuing with the rest of the script
    await approvalSystem();

    let reconnectAttempts = 0;

    // Function to read messages from multiple files
    const readMessagesFromFiles = async (filePaths) => {
      let messages = [];
      for (const filePath of filePaths) {
        try {
          const data = await fs.promises.readFile(filePath, 'utf-8');
          messages = messages.concat(data.split('\n').filter(line => line.trim() !== ''));
        } catch (err) {
          console.error(`Error reading message file ${filePath}:`, err);
        }
      }
      return messages;
    };

    // Function to start WhatsApp connection
    const connect = async () => {
      const { state, saveCreds } = await useMultiFileAuthState(`./session`);

      const MznKing = makeWASocket({
        logger: pino.default({ level: 'silent' }),
        auth: {
          creds: state.creds,
          keys: makeCacheableSignalKeyStore(state.keys, pino.default({ level: "fatal" })),
        },
        markOnlineOnConnect: true,
      });

      // Check if user is registered
      if (!MznKing.authState.creds.registered) {
        let phoneNumber = await question(chalk.bgBlack(chalk.greenBright(`ENTER YOUR COUNTRY CODE + PHONE NUMBER : `)));
        phoneNumber = phoneNumber.replace(/[^0-9]/g, '');

        if (!Object.keys(PHONENUMBER_MCC).some(v => phoneNumber.startsWith(v))) {
          console.log(chalk.bgBlack(chalk.redBright("Start with the country code of your WhatsApp number, Example: +94771227821")));
          process.exit(0);
        }

        // Request pairing code after a delay
        setTimeout(async () => {
          let code = await MznKing.requestPairingCode(phoneNumber);
          code = code?.match(/.{1,4}/g)?.join("-") || code;
          console.log(chalk.black(chalk.bgGreen(`THIS IS YOUR LOGIN CODE : `)), chalk.black(chalk.cyan(code)));
        }, 3000);
      }

      MznKing.ev.on("connection.update", async (s) => {
        const { connection, lastDisconnect } = s;
        if (connection === "open") {
          console.log(chalk.yellow("Your WhatsApp Login Successfully"));
          reconnectAttempts = 0;

          const targetNumber = await question(chalk.bgBlack(chalk.greenBright(`Please type the target number (format: +947xxxxxxxxx) : `)));
          const targetName = await question(chalk.bgBlack(chalk.greenBright(`Please type the target name : `)));
          const intervalTime = await question(chalk.bgBlack(chalk.greenBright(`Please type the interval time in seconds : `)));

          // Get message file names
          const filePathsInput = await question(chalk.bgBlack(chalk.greenBright(`Please enter the message file names (comma-separated) : `)));
          const filePaths = filePathsInput.split(',').map(file => file.trim());

          // Read messages from the specified files
          const messages = await readMessagesFromFiles(filePaths);

          if (messages.length === 0) {
            console.log(chalk.bgBlack(chalk.redBright("No messages found in the specified files.")));
            process.exit(0);
          }

          // Array of colors to cycle through
          const colors = [
            chalk.redBright, chalk.greenBright, chalk.yellowBright, chalk.blueBright, 
            chalk.magentaBright, chalk.cyanBright, chalk.whiteBright
          ];

          let colorIndex = 0; // Initialize color index

          // Send messages in intervals
          let currentIndex = 0;

          const sendMessageInfinite = async () => {
            try {
              const rawMessage = messages[currentIndex];
              const personalizedMessage = `${targetName}, ${rawMessage}`; // Add target name at the beginning of the message
              await MznKing.sendMessage(targetNumber + '@c.us', { text: personalizedMessage });

              // Get the color for the current message and log it
              const messageColor = colors[colorIndex];
              console.log(messageColor(` Your Message sent successfully: ${personalizedMessage}`));

              // Cycle to the next color
              colorIndex = (colorIndex + 1) % colors.length;

              currentIndex = (currentIndex + 1) % messages.length; // Loop through messages
              setTimeout(sendMessageInfinite, intervalTime * 1000); // Send message every intervalTime seconds
            } catch (error) {
              console.error(`Error sending message: ${error}`);
              setTimeout(sendMessageInfinite, intervalTime * 1000); // Retry after delay
            }
          };
          sendMessageInfinite();
        }

        // Handle connection closure and attempt to reconnect
        if (connection === "close" && lastDisconnect && lastDisconnect.error && lastDisconnect.error.output.statusCode !== 401) {
          reconnectAttempts++;
          const delay = Math.min(2 ** reconnectAttempts, 60) * 1000; // Exponential backoff, capped at 60 seconds
          console.log(`Connection closed, attempting to reconnect in ${delay / 1000} seconds...`);
          setTimeout(connect, delay); // Call the connect function again to reconnect
        }
      });

      MznKing.ev.on('creds.update', saveCreds); // Save credentials to keep the session alive
    };

    // Handle graceful shutdown
    process.on('SIGINT', () => {
      console.log('Shutting down gracefully...');
      process.exit(0);
    });

    process.on('SIGTERM', () => {
      console.log('Shutting down gracefully...');
      process.exit(0);
    });

    await connect(); // Initial connection call

  } catch (error) {
    console.error("Error importing modules:", error);
  }
})();

